package ru.nsu.fit.yus.mafia.console.view;

import ru.nsu.fit.yus.mafia.EventType;
import ru.nsu.fit.yus.mafia.Observer;
import ru.nsu.fit.yus.mafia.model.Model;
import ru.nsu.fit.yus.mafia.model.Player;

import java.util.Collections;
import java.util.List;
import java.util.Map;

public class ConsoleView implements Observer {
    private Player subscriber; // –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –ª–∏—Ü–µ ConsoleView
    public ConsoleView (Model model) {
        model.addObserver(this);
    }

    public void assignTheSubscriber(Player subscriber) {
        this.subscriber = subscriber;
    }


    @Override
    public void onGameEvent(EventType type, Map<String, Object> data) {
        switch (type) {
            case GAME_STARTED -> displayGameStart();
            case NIGHT_STARTED -> displayNightStart();
            case DAY_STARTED -> displayDayStart();
            case SHERIFF_CHECK -> displaySheriffInvestigation((String) data.get("player"), (boolean) data.get("isMafia"));
            case PATIENT_CHOSEN -> displayDoctorChosen((String) data.get("patient"));
            case PLAYER_KILLED -> displayPlayerKilled((String) data.get("player"));
            case PLAYER_SPOKEN -> displayPlayerSpoken((String) data.get("player"), (String) data.get("message"));
            case PLAYER_VOTED -> displayVote((String) data.get("voter"), (String) data.get("voted"));
            case MAFIA_VOTED -> displayMafiaVote((String) data.get("voter"), (String) data.get("voted"));
            case VICTIM_CHOSEN -> displayMafiaDecision((String) data.get("victim"));
            case PLAYER_ELIMINATED -> displayElimination((String) data.get("player"));
            case GAME_ENDED -> displayGameEnd((String) data.get("winner"));
            case GAME_OVER -> displayGameOver();
            case PLAYER_ROLE_REVEALED -> displayPlayerRole((String) data.get("player"), (String) data.get("role"));
            //case TRUST_UPDATED -> displayTrustUpdate((Map<String, Double>) data.get("trustMap"));
            case PLAYER_MESSAGE_OPTIONS -> displayMessageOptions((Player) data.get("player"), (List<String>) data.get("options"));
            case PLAYER_CHOOSE_TARGET -> displayTargetChoices((Player) data.get("player"), (List<String>) data.get("targets"));
            case SHOW_LIVING_PLAYERS -> updateLivingPlayers((List<String>) data.get("players"));
            case SHOW_LIVING_MAFIA -> displayLivingMafia((List<String>) data.get("members"));
            case SHOW_LIVING_SHERIFF -> displayLivingSheriff((String) data.get("sheriff"));
            case SHOW_LIVING_DOCTOR -> displayLivingDoctor((String) data.get("doctor"));
            case PLAYER_LAST_WORD -> displayLastWord((String) data.get("player"), (String) data.get("message"));
            case SHOW_MESSAGE -> displayMessage((String) data.get("message"));
            case NEW_VOTE -> displayNewVote();
            case NOBODY_PRISONED -> displayNobodyPrisoned();
        }
    }

    private void displayGameStart() {
        System.out.println("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
    }

    private void displayNightStart() {
        System.out.println("üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å...");
    }

    private void displayDayStart() {
        System.out.println("üåû –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å.");
    }

    private void displayPlayerKilled(String player) {
        System.out.println("üíÄ –ù–æ—á—å—é —É–±–∏—Ç –∏–≥—Ä–æ–∫: " + player);
    }

    private void displayPlayerSpoken(String player, String message) {
        System.out.println("üí¨ " + player + ": " + message);
    }

    private void displayVote(String voter, String voted) {
        System.out.println("üó≥Ô∏è " + voter + " –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ " + voted);
    }


    // –í–ò–î–ù–û –¢–û–õ–¨–ö–û –ß–õ–ï–ù–ê–ú –ú–ê–§–ò–ò
    private void displayMafiaVote(String voter, String voted) {
        if (subscriber.getPlayerRole().isMafia()) {
            System.out.println("–ú–∞—Ñ–∏–æ–∑–æ " + voter + " –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ " + voted);
        }
    }

    private void displayMafiaDecision(String victim) {
        if (subscriber.getPlayerRole().isMafia()) {
            System.out.println("–ü–æ –∏—Ç–æ–≥–∞–º –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∂–µ—Ä—Ç–≤–∞: " + victim);
        }
    }

    private void displayElimination(String player) {
        System.out.println("‚ùå –ü–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á—ë–Ω –∏–≥—Ä–æ–∫: " + player);
    }

    private void displayGameEnd(String winner) {
        System.out.println("üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞: " + winner);
    }

    private void displayGameOver() {
        System.out.println("üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –£–≤—ã, –≤—ã –±—ã–ª–∏ —É–±–∏—Ç—ã.");
    }

    /*private void displayTrustUpdate(Map<String, Double> trustMap) {
        System.out.println("üìä –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:");
        trustMap.forEach((player, trust) ->
                System.out.printf(" - %s: %.2f%n", player, trust));
    }*/

    private void displayPlayerRole(String player, String role) {
        System.out.println("üïµÔ∏è " + player + ", –≤–∞—à–∞ —Ä–æ–ª—å: " + role);
    }

    private void displayMessageOptions(Player player, List<String> options) {
        if (player != subscriber) { return; }
        System.out.println("üí¨ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:");
        for (int i = 0; i < options.size(); i++) {
            System.out.printf("  [%d] %s%n", i + 1, options.get(i));
        }
    }

    private void displayTargetChoices(Player player, List<String> targets) {
        if (player != subscriber) { return; } //–í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–µ –Ω–∞–º
        System.out.println("üéØ " + player.getPlayerName() + ", –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:");
        for (int i = 0; i < targets.size(); i++) {
            System.out.printf("  [%d] %s%n", i + 1, targets.get(i));
        }
    }

    private void updateLivingPlayers(List<String> players) {
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö
        System.out.println("–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:");
        displayLivingPlayers(players);
    }


    // –¢–û–õ–¨–ö–û –ú–ê–§–ò–ò
    private void displayLivingMafia(List<String> mafiaMembers) {
        if (subscriber.getPlayerRole().isMafia()) {
            System.out.println("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –º–∞—Ñ–∏—è: ");
            displayLivingPlayers(mafiaMembers);
        }
    }

    // –¢–û–õ–¨–ö–û –®–ï–†–ò–§–£
    private void displayLivingSheriff(String sheriff) {
        if (subscriber.getPlayerRole().isSheriff()) {
            System.out.println("–®–µ—Ä–∏—Ñ: ");
            displayLivingPlayers(Collections.singletonList(sheriff));
        }
    }

    public void displaySheriffInvestigation(String target, boolean isMafia) {
        if (subscriber.getPlayerRole().isSheriff()) {
            if (isMafia)
                System.out.println(target + " - –º–∞—Ñ–∏—è!");
            else
                System.out.println(target + " - –Ω–µ –º–∞—Ñ–∏—è.");
        }
    }

    // –¢–û–õ–¨–ö–û –î–û–ö–¢–û–†–£
    private void displayLivingDoctor(String doctor) {
        if (subscriber.getPlayerRole().isDoctor()) {
            System.out.println("–î–æ–∫—Ç–æ—Ä: ");
            displayLivingPlayers(Collections.singletonList(doctor));
        }
    }

    private void displayDoctorChosen(String target) {
        if (subscriber.getPlayerRole().isDoctor()) {
            System.out.println("–î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞: " + target);
        }
    }

    private void displayLivingPlayers(List<String> playersList) {
        for (String player : playersList) {
            System.out.println(" - " + player);
        }
    }

    private void displayLastWord(String player, String message) {
        System.out.printf("üó£ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ %s: \"%s\"%n", player, message);
    }

    private void displayMessage(String message) {
        System.out.println(message);
    }

    private void displayNewVote() {
        System.out.println("–ò—Ç–æ–≥ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!");
    }

    private void displayNobodyPrisoned() {
        System.out.println("–ü–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω!");
    }

}
